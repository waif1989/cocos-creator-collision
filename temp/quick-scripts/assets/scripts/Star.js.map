{"version":3,"sources":["Star.js"],"names":["cc","Class","extends","Component","properties","testNum","pickRadius","game","default","serializable","getPlayerDistance","playerPos","player","getPosition","dist","pDistance","node","position","onPicked","gainScore","onCollisionEnter","round","finished","callFunc","self","setTimeout","ground","gameOver","spawnNewStar","jumpAble","destroy","actionAll","spawn","moveTo","p","leftOrRight","rotateBy","runAction","easing","easeOut","console","log","start"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,UAASF,GAAGG,SADP;;AAGLC,aAAY;AACXC,WAAS,CADE;AAEX;AACAC,cAAY,CAHD;AAIX;AACAC,QAAM;AACLC,YAAS,IADJ;AAELC,iBAAc;AAFT;AALK,EAHP;;AAcRC,oBAAmB,6BAAY;AAC9B;AACA,MAAIC,YAAY,KAAKJ,IAAL,CAAUK,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,MAAIC,OAAOd,GAAGe,SAAH,CAAa,KAAKC,IAAL,CAAUC,QAAvB,EAAiCN,SAAjC,CAAX;AACA,SAAOG,IAAP;AACA,EApBO;;AAsBRI,WAAU,oBAAW;;AAEpB;AACA,OAAKX,IAAL,CAAUY,SAAV;AACA;;;;AAIA,EA9BO;;AAgCRC,mBAAkB,4BAAY;AAC1B,MAAI,KAAKb,IAAL,CAAUc,KAAd,EAAqB;AACpB,QAAKd,IAAL,CAAUc,KAAV,GAAkB,KAAlB;AACA,OAAIC,WAAWtB,GAAGuB,QAAH,CAAY,YAAW;AACrC,QAAIC,OAAO,IAAX;AACAC,eAAW,YAAY;AACtB;AACA,SAAI,CAACD,KAAKjB,IAAL,CAAUmB,MAAV,CAAiBC,QAAtB,EAAgC;AAC/BH,WAAKjB,IAAL,CAAUqB,YAAV;AACAJ,WAAKjB,IAAL,CAAUK,MAAV,CAAiBiB,QAAjB,GAA4B,IAA5B;AACAL,WAAKjB,IAAL,CAAUc,KAAV,GAAkB,IAAlB;AACA;AACAG,WAAKR,IAAL,CAAUc,OAAV;AACA,MAND,MAMO;AACNN,WAAKjB,IAAL,CAAUK,MAAV,CAAiBiB,QAAjB,GAA4B,KAA5B;AACAL,WAAKR,IAAL,CAAUc,OAAV;AACA;AACD,KAZD,EAYG,GAZH;AAaA,IAfc,EAeZ,IAfY,CAAf;AAgBA,OAAIC,YAAY/B,GAAGgC,KAAH,CACfhC,GAAGiC,MAAH,CAAU,CAAV,EAAajC,GAAGkC,CAAH,CAAK,CAAC,KAAK3B,IAAL,CAAU4B,WAAX,GAAyB,GAA9B,EAAmC,GAAnC,CAAb,CADe,EAEfnC,GAAGoC,QAAH,CAAY,CAAZ,EAAe,GAAf,CAFe,EAGfd,QAHe,CAAhB;AAKA,QAAKN,IAAL,CAAUqB,SAAV,CAAoBN,UAAUO,MAAV,CAAiBtC,GAAGuC,OAAH,CAAW,GAAX,CAAjB,CAApB;AACA,QAAKrB,QAAL;AACA;AACJsB,UAAQC,GAAR,CAAY,oBAAZ;AACA,EA5DO;;AA8DR;;;;;;;;;AASG;;AAEA;;AAEAC,MA3EK,mBA2EI,CAER;AA7EI;;AA+EL;AA/EJ","file":"Star.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n    \ttestNum: 1,\r\n\t    // 星星和主角之间的距离小于这个数值时，就会完成收集\r\n\t    pickRadius: 0,\r\n\t    // 暂存 Game 对象的引用\r\n\t    game: {\r\n\t\t    default: null,\r\n\t\t    serializable: false\r\n\t    }\r\n    },\r\n\t\r\n\tgetPlayerDistance: function () {\r\n\t\t// 根据 player 节点位置判断距离\r\n\t\tvar playerPos = this.game.player.getPosition();\r\n\t\t// 根据两点位置计算两点之间距离\r\n\t\tvar dist = cc.pDistance(this.node.position, playerPos);\r\n\t\treturn dist;\r\n\t},\r\n\t\r\n\tonPicked: function() {\r\n\t\t\r\n\t\t// 调用 Game 脚本的得分方法\r\n\t\tthis.game.gainScore();\r\n\t\t/*// 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n\t\tthis.game.spawnNewStar();\r\n\t\t// 然后销毁当前星星节点\r\n\t\tthis.node.destroy();*/\r\n\t},\r\n\t\r\n\tonCollisionEnter: function () {\r\n    \tif (this.game.round) {\r\n\t\t    this.game.round = false;\r\n\t\t    var finished = cc.callFunc(function() {\r\n\t\t    \tvar self = this;\r\n\t\t    \tsetTimeout(function () {\r\n\t\t\t\t    // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n\t\t\t\t    if (!self.game.ground.gameOver) {\r\n\t\t\t\t\t    self.game.spawnNewStar();\r\n\t\t\t\t\t    self.game.player.jumpAble = true;\r\n\t\t\t\t\t    self.game.round = true;\r\n\t\t\t\t\t    // 然后销毁当前星星节点\r\n\t\t\t\t\t    self.node.destroy();\r\n\t\t\t\t    } else {\r\n\t\t\t\t\t    self.game.player.jumpAble = false;\r\n\t\t\t\t\t    self.node.destroy();\r\n\t\t\t\t    }\r\n\t\t\t    }, 700);\r\n\t\t    }, this);\r\n\t\t    var actionAll = cc.spawn(\r\n\t\t\t    cc.moveTo(2, cc.p(-this.game.leftOrRight * 750, 750)),\r\n\t\t\t    cc.rotateBy(2, 720),\r\n\t\t\t    finished\r\n\t\t    );\r\n\t\t    this.node.runAction(actionAll.easing(cc.easeOut(3.0)));\r\n\t\t    this.onPicked();\r\n\t    }\r\n\t\tconsole.log('on collision enter')\r\n\t},\r\n\t\r\n\t/*update: function (dt) {\r\n\t\t// 每帧判断和主角之间的距离是否小于收集距离\r\n\t\tif (this.getPlayerDistance() < this.pickRadius) {\r\n\t\t\t// 调用收集行为\r\n\t\t\tthis.onPicked();\r\n\t\t\treturn;\r\n\t\t}\r\n\t},*/\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}