{"version":3,"sources":["Star.js"],"names":["cc","Class","extends","Component","properties","game","default","serializable","jumpAudio","url","AudioClip","pickRadius","getPlayerDistance","playerPos","player","getPosition","dist","pDistance","node","position","onPicked","gainScore","newRandomFunc","Min","Max","Range","Rand","Math","random","num","floor","actionFinishFunc","callFunc","self","setTimeout","ground","gameOver","spawnNewStar","jumpAble","round","destroy","onCollisionEnter","finished","t","random0To1","actionAll","spawn","moveTo","p","rotateBy","runAction","easing","easeOut","start"],"mappings":"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","file":"Star.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\t    // 暂存 Game 对象的引用\r\n\t    game: {\r\n\t\t    default: null,\r\n\t\t    serializable: false\r\n\t    },\r\n\t    // 跳跃音效资源\r\n\t    jumpAudio: {\r\n\t\t    default: null,\r\n\t\t    url: cc.AudioClip\r\n\t    },\r\n\t    // 星星和主角之间的距离小于这个数值时，就会完成收集\r\n\t    pickRadius: 0\r\n    },\r\n\t\r\n\tgetPlayerDistance: function () {\r\n\t\t// 根据 player 节点位置判断距离\r\n\t\tvar playerPos = this.game.player.getPosition();\r\n\t\t// 根据两点位置计算两点之间距离\r\n\t\tvar dist = cc.pDistance(this.node.position, playerPos);\r\n\t\treturn dist;\r\n\t},\r\n\t\r\n\tonPicked: function() {\r\n\t\t// 调用 Game 脚本的得分方法\r\n\t\tthis.game.gainScore();\r\n\t},\r\n\t\r\n\tnewRandomFunc: function (Min, Max) {\r\n\t\tvar Range = Max - Min;\r\n\t\tvar Rand = Math.random();\r\n\t\tvar num = Min + Math.floor(Rand * Range); // 舍去\r\n\t\treturn num;\r\n\t},\r\n\t\r\n\tactionFinishFunc: function () {\r\n\t\treturn cc.callFunc(function() {\r\n\t\t\tvar self = this;\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\t// 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n\t\t\t\tif (!self.game.ground.gameOver) {\r\n\t\t\t\t\tself.game.spawnNewStar();\r\n\t\t\t\t\tself.game.player.jumpAble = true;\r\n\t\t\t\t\tself.game.round = true;\r\n\t\t\t\t\t// 然后销毁当前星星节点\r\n\t\t\t\t\tself.node.destroy();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tself.game.player.jumpAble = false;\r\n\t\t\t\t\tself.node.destroy();\r\n\t\t\t\t}\r\n\t\t\t}, 700);\r\n\t\t}, this);\r\n\t},\r\n\t\r\n\tonCollisionEnter: function () {\r\n    \tif (this.game.round) {\r\n\t\t    this.game.round = false;\r\n\t\t    var finished = cc.callFunc(function() {\r\n\t\t    \tvar self = this;\r\n\t\t    \tsetTimeout(function () {\r\n\t\t\t\t    // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n\t\t\t\t    if (!self.game.ground.gameOver) {\r\n\t\t\t\t\t    self.game.spawnNewStar();\r\n\t\t\t\t\t    self.game.player.jumpAble = true;\r\n\t\t\t\t\t    self.game.round = true;\r\n\t\t\t\t\t    // 然后销毁当前星星节点\r\n\t\t\t\t\t    self.node.destroy();\r\n\t\t\t\t    } else {\r\n\t\t\t\t\t    self.game.player.jumpAble = false;\r\n\t\t\t\t\t    self.node.destroy();\r\n\t\t\t\t    }\r\n\t\t\t    }, 700);\r\n\t\t    }, this);\r\n\t\t    var t = cc.random0To1() > 0.5 ? -1 : 1;\r\n\t\t    // var r = this.newRandomFunc(1, 2);\r\n\t\t    var actionAll = cc.spawn(\r\n\t\t\t    cc.moveTo(2, cc.p(t * 480, 480)),\r\n\t\t\t    cc.rotateBy(2, 720),\r\n\t\t\t    finished\r\n\t\t    );\r\n\t\t    this.node.runAction(actionAll.easing(cc.easeOut(3.0)));\r\n\t\t    this.onPicked();\r\n\t    }\r\n\t\t// console.log('Star collision')\r\n\t},\r\n\t\r\n\t/*update: function (dt) {\r\n\t\t// 每帧判断和主角之间的距离是否小于收集距离\r\n\t\tif (this.getPlayerDistance() < this.pickRadius) {\r\n\t\t\t// 调用收集行为\r\n\t\t\tthis.onPicked();\r\n\t\t\treturn;\r\n\t\t}\r\n\t},*/\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}